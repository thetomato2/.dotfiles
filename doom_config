;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

(setq user-full-name "Derek Nord"
      user-mail-address "derekj.nord@gmail.com")

(setq doom-font (font-spec :family "Hack" :size 15)
      doom-variable-pitch-font (font-spec :family "SourceCodePro" :size 17))

(setq doom-theme 'doom-tomato)

(setq org-directory "~/org/")

(setq display-line-numbers-type `relative)

(setq dap-cpptools-extension-version "1.7.1")
(require `dap-cpptools)

(setq-hook! 'html-mode-hook +format-with 'prettier)


;;; Packages
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(defface tree-sitter-hl-face:cpp-namespace
  '((default :inherit tree-sitter-hl-face:type))
  "Face for type arguments."
  :group 'tree-sitter-hl-faces)


(add-function :before-until tree-sitter-hl-face-mapping-function
              (lambda (capture-name)
                (pcase capture-name
                  ("tomato" 'tree-sitter-hl-face:cpp-namespace))))

(add-hook 'c++-mode-hook
          (lambda()
            (tree-sitter-hl-add-patterns nil
              [(namespace_definition (identifier)
                                     @tomato)])))

(add-hook 'c++-mode-hook
          (lambda()
            (tree-sitter-hl-add-patterns nil
              [((namespace_identifier) @tomato
                (.match? @tomato "^[A-Za-z]"))])))

;; (add-hook 'c++-mode-hook
;;           (lambda()
;;             (tree-sitter-hl-add-patterns nil
;;               [((lifetime (identifier) @type.builtin)
;;                 (.eq? @type.builtin "internal"))
;;                (lifetime (identifier) @label)])))


(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u8"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u16"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u32"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u64"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s8"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s16"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s32"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s64"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i8"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i16"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i32"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i64"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "f32"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "f64"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "szt"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "byt"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "ul"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "ull"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "b8"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "b16"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "b32"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "v2"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "v3"))])

(tree-sitter-hl-add-patterns `cpp
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "v4"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u8"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u16"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u32"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "u64"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s8"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s16"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s32"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "s64"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i8"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i16"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i32"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "i64"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "f32"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "f64"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "szt"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "byt"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "ul"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "ull"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "b8"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "b16"))])

(tree-sitter-hl-add-patterns `c
  [((type_identifier) @type.builtin
    (.eq? @type.builtin  "b32"))])



;; (tree-sitter-hl-add-patterns `c
;;   [((type_identifier) @keyword
;;     (.match? @keyword  "internal"))])

;; (tree-sitter-hl-add-patterns `c
;;   [((identifier) @type.builtin
;;     (.match? @type.builtin  "void"))])

(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"
                                "--header-insertion-decorators=0"))

(after! lsp-clangd (set-lsp-priority! 'clangd 2))


;;(when (featurep! +lsp)
;;  (add-hook! '(c-mode-local-vars-hook
;;              c++-mode-local-vars-hook
;;              cmake-mode-local-vars-hook)
;;            #'lsp!))

;; my stuff
;; (map! :leader
;;       (:prefix-map ("a" . "My stuff")
;;        :desc "Format Buffer" "k" #'format-all-buffer
;;        :desc "Go to other file" "o" #'lsp-clangd-find-other-file
;;        :desc "Go to definition" "g" #'evil-goto-definition
;;        ))

(setq
 projectile-project-search-path `("~/dev" "/mnt/c/dev/")
 )

;; aspell setup
(setq
 ispell-dictionary "en")

(setq modern-c++-keywords nil)
